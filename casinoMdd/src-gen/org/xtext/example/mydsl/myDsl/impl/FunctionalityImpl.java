/**
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.myDsl.Directory;
import org.xtext.example.mydsl.myDsl.Functionality;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.RouterComponent;
import org.xtext.example.mydsl.myDsl.ServiceFront;
import org.xtext.example.mydsl.myDsl.State;
import org.xtext.example.mydsl.myDsl.Visualizer;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Functionality</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FunctionalityImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FunctionalityImpl#getRoute <em>Route</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FunctionalityImpl#getWrap <em>Wrap</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FunctionalityImpl#getRender <em>Render</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FunctionalityImpl#getState <em>State</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FunctionalityImpl#getService <em>Service</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.FunctionalityImpl#getType <em>Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionalityImpl extends AbstractFrontElementImpl implements Functionality
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRoute() <em>Route</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoute()
   * @generated
   * @ordered
   */
  protected RouterComponent route;

  /**
   * The cached value of the '{@link #getWrap() <em>Wrap</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWrap()
   * @generated
   * @ordered
   */
  protected org.xtext.example.mydsl.myDsl.Container wrap;

  /**
   * The cached value of the '{@link #getRender() <em>Render</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRender()
   * @generated
   * @ordered
   */
  protected Visualizer render;

  /**
   * The cached value of the '{@link #getState() <em>State</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getState()
   * @generated
   * @ordered
   */
  protected State state;

  /**
   * The cached value of the '{@link #getService() <em>Service</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getService()
   * @generated
   * @ordered
   */
  protected ServiceFront service;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected Directory type;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionalityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FUNCTIONALITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONALITY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RouterComponent getRoute()
  {
    if (route != null && route.eIsProxy())
    {
      InternalEObject oldRoute = (InternalEObject)route;
      route = (RouterComponent)eResolveProxy(oldRoute);
      if (route != oldRoute)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.FUNCTIONALITY__ROUTE, oldRoute, route));
      }
    }
    return route;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RouterComponent basicGetRoute()
  {
    return route;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoute(RouterComponent newRoute)
  {
    RouterComponent oldRoute = route;
    route = newRoute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONALITY__ROUTE, oldRoute, route));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.mydsl.myDsl.Container getWrap()
  {
    if (wrap != null && wrap.eIsProxy())
    {
      InternalEObject oldWrap = (InternalEObject)wrap;
      wrap = (org.xtext.example.mydsl.myDsl.Container)eResolveProxy(oldWrap);
      if (wrap != oldWrap)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.FUNCTIONALITY__WRAP, oldWrap, wrap));
      }
    }
    return wrap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.example.mydsl.myDsl.Container basicGetWrap()
  {
    return wrap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWrap(org.xtext.example.mydsl.myDsl.Container newWrap)
  {
    org.xtext.example.mydsl.myDsl.Container oldWrap = wrap;
    wrap = newWrap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONALITY__WRAP, oldWrap, wrap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Visualizer getRender()
  {
    if (render != null && render.eIsProxy())
    {
      InternalEObject oldRender = (InternalEObject)render;
      render = (Visualizer)eResolveProxy(oldRender);
      if (render != oldRender)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.FUNCTIONALITY__RENDER, oldRender, render));
      }
    }
    return render;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Visualizer basicGetRender()
  {
    return render;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRender(Visualizer newRender)
  {
    Visualizer oldRender = render;
    render = newRender;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONALITY__RENDER, oldRender, render));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public State getState()
  {
    if (state != null && state.eIsProxy())
    {
      InternalEObject oldState = (InternalEObject)state;
      state = (State)eResolveProxy(oldState);
      if (state != oldState)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.FUNCTIONALITY__STATE, oldState, state));
      }
    }
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State basicGetState()
  {
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setState(State newState)
  {
    State oldState = state;
    state = newState;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONALITY__STATE, oldState, state));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServiceFront getService()
  {
    if (service != null && service.eIsProxy())
    {
      InternalEObject oldService = (InternalEObject)service;
      service = (ServiceFront)eResolveProxy(oldService);
      if (service != oldService)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.FUNCTIONALITY__SERVICE, oldService, service));
      }
    }
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ServiceFront basicGetService()
  {
    return service;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setService(ServiceFront newService)
  {
    ServiceFront oldService = service;
    service = newService;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONALITY__SERVICE, oldService, service));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directory getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (Directory)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.FUNCTIONALITY__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Directory basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(Directory newType)
  {
    Directory oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FUNCTIONALITY__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONALITY__NAME:
        return getName();
      case MyDslPackage.FUNCTIONALITY__ROUTE:
        if (resolve) return getRoute();
        return basicGetRoute();
      case MyDslPackage.FUNCTIONALITY__WRAP:
        if (resolve) return getWrap();
        return basicGetWrap();
      case MyDslPackage.FUNCTIONALITY__RENDER:
        if (resolve) return getRender();
        return basicGetRender();
      case MyDslPackage.FUNCTIONALITY__STATE:
        if (resolve) return getState();
        return basicGetState();
      case MyDslPackage.FUNCTIONALITY__SERVICE:
        if (resolve) return getService();
        return basicGetService();
      case MyDslPackage.FUNCTIONALITY__TYPE:
        if (resolve) return getType();
        return basicGetType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONALITY__NAME:
        setName((String)newValue);
        return;
      case MyDslPackage.FUNCTIONALITY__ROUTE:
        setRoute((RouterComponent)newValue);
        return;
      case MyDslPackage.FUNCTIONALITY__WRAP:
        setWrap((org.xtext.example.mydsl.myDsl.Container)newValue);
        return;
      case MyDslPackage.FUNCTIONALITY__RENDER:
        setRender((Visualizer)newValue);
        return;
      case MyDslPackage.FUNCTIONALITY__STATE:
        setState((State)newValue);
        return;
      case MyDslPackage.FUNCTIONALITY__SERVICE:
        setService((ServiceFront)newValue);
        return;
      case MyDslPackage.FUNCTIONALITY__TYPE:
        setType((Directory)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONALITY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MyDslPackage.FUNCTIONALITY__ROUTE:
        setRoute((RouterComponent)null);
        return;
      case MyDslPackage.FUNCTIONALITY__WRAP:
        setWrap((org.xtext.example.mydsl.myDsl.Container)null);
        return;
      case MyDslPackage.FUNCTIONALITY__RENDER:
        setRender((Visualizer)null);
        return;
      case MyDslPackage.FUNCTIONALITY__STATE:
        setState((State)null);
        return;
      case MyDslPackage.FUNCTIONALITY__SERVICE:
        setService((ServiceFront)null);
        return;
      case MyDslPackage.FUNCTIONALITY__TYPE:
        setType((Directory)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FUNCTIONALITY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MyDslPackage.FUNCTIONALITY__ROUTE:
        return route != null;
      case MyDslPackage.FUNCTIONALITY__WRAP:
        return wrap != null;
      case MyDslPackage.FUNCTIONALITY__RENDER:
        return render != null;
      case MyDslPackage.FUNCTIONALITY__STATE:
        return state != null;
      case MyDslPackage.FUNCTIONALITY__SERVICE:
        return service != null;
      case MyDslPackage.FUNCTIONALITY__TYPE:
        return type != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //FunctionalityImpl
