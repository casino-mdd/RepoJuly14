/**
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myDsl.AbstractClass;
import org.xtext.example.mydsl.myDsl.AbstractFrontElement;
import org.xtext.example.mydsl.myDsl.AbstractMethod;
import org.xtext.example.mydsl.myDsl.Action;
import org.xtext.example.mydsl.myDsl.ActionCreator;
import org.xtext.example.mydsl.myDsl.ActionDispatcher;
import org.xtext.example.mydsl.myDsl.Annotation;
import org.xtext.example.mydsl.myDsl.Architecture;
import org.xtext.example.mydsl.myDsl.Attribute;
import org.xtext.example.mydsl.myDsl.AxiosRequest;
import org.xtext.example.mydsl.myDsl.Component;
import org.xtext.example.mydsl.myDsl.Container;
import org.xtext.example.mydsl.myDsl.Css;
import org.xtext.example.mydsl.myDsl.Descriptor;
import org.xtext.example.mydsl.myDsl.Directory;
import org.xtext.example.mydsl.myDsl.Domain;
import org.xtext.example.mydsl.myDsl.Eclass;
import org.xtext.example.mydsl.myDsl.Einterface;
import org.xtext.example.mydsl.myDsl.EntityName;
import org.xtext.example.mydsl.myDsl.Epackage;
import org.xtext.example.mydsl.myDsl.File;
import org.xtext.example.mydsl.myDsl.Functionality;
import org.xtext.example.mydsl.myDsl.GeneralEntity;
import org.xtext.example.mydsl.myDsl.GenericClass;
import org.xtext.example.mydsl.myDsl.JavaApp;
import org.xtext.example.mydsl.myDsl.JeeProject;
import org.xtext.example.mydsl.myDsl.Js;
import org.xtext.example.mydsl.myDsl.JsMethod;
import org.xtext.example.mydsl.myDsl.JsMethodArgs;
import org.xtext.example.mydsl.myDsl.JsModule;
import org.xtext.example.mydsl.myDsl.Json;
import org.xtext.example.mydsl.myDsl.Layer;
import org.xtext.example.mydsl.myDsl.LayerSegment;
import org.xtext.example.mydsl.myDsl.LayerSegmentRelation;
import org.xtext.example.mydsl.myDsl.Library;
import org.xtext.example.mydsl.myDsl.Md;
import org.xtext.example.mydsl.myDsl.MethodBack;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.NativeClass;
import org.xtext.example.mydsl.myDsl.Operateson;
import org.xtext.example.mydsl.myDsl.Operation;
import org.xtext.example.mydsl.myDsl.Property;
import org.xtext.example.mydsl.myDsl.ReactApp;
import org.xtext.example.mydsl.myDsl.Reducer;
import org.xtext.example.mydsl.myDsl.RelationArch;
import org.xtext.example.mydsl.myDsl.RelationDom;
import org.xtext.example.mydsl.myDsl.RouterComponent;
import org.xtext.example.mydsl.myDsl.ServiceFront;
import org.xtext.example.mydsl.myDsl.SpecialEntity;
import org.xtext.example.mydsl.myDsl.State;
import org.xtext.example.mydsl.myDsl.SublayerSegment;
import org.xtext.example.mydsl.myDsl.Submodule;
import org.xtext.example.mydsl.myDsl.Subproject;
import org.xtext.example.mydsl.myDsl.Technology;
import org.xtext.example.mydsl.myDsl.Transaction;
import org.xtext.example.mydsl.myDsl.Type;
import org.xtext.example.mydsl.myDsl.UIComponent;
import org.xtext.example.mydsl.myDsl.Visualizer;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.SYSTEM:
      {
        org.xtext.example.mydsl.myDsl.System system = (org.xtext.example.mydsl.myDsl.System)theEObject;
        T result = caseSystem(system);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DOMAIN:
      {
        Domain domain = (Domain)theEObject;
        T result = caseDomain(domain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MODULE:
      {
        org.xtext.example.mydsl.myDsl.Module module = (org.xtext.example.mydsl.myDsl.Module)theEObject;
        T result = caseModule(module);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUBMODULE:
      {
        Submodule submodule = (Submodule)theEObject;
        T result = caseSubmodule(submodule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATION:
      {
        Operation operation = (Operation)theEObject;
        T result = caseOperation(operation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENTITY_NAME:
      {
        EntityName entityName = (EntityName)theEObject;
        T result = caseEntityName(entityName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GENERAL_ENTITY:
      {
        GeneralEntity generalEntity = (GeneralEntity)theEObject;
        T result = caseGeneralEntity(generalEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PROPERTY:
      {
        Property property = (Property)theEObject;
        T result = caseProperty(property);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = caseAbstractFrontElement(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SPECIAL_ENTITY:
      {
        SpecialEntity specialEntity = (SpecialEntity)theEObject;
        T result = caseSpecialEntity(specialEntity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRANSACTION:
      {
        Transaction transaction = (Transaction)theEObject;
        T result = caseTransaction(transaction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OPERATESON:
      {
        Operateson operateson = (Operateson)theEObject;
        T result = caseOperateson(operateson);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATION_DOM:
      {
        RelationDom relationDom = (RelationDom)theEObject;
        T result = caseRelationDom(relationDom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARCHITECTURE:
      {
        Architecture architecture = (Architecture)theEObject;
        T result = caseArchitecture(architecture);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPONENT:
      {
        Component component = (Component)theEObject;
        T result = caseComponent(component);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LAYER:
      {
        Layer layer = (Layer)theEObject;
        T result = caseLayer(layer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LAYER_SEGMENT:
      {
        LayerSegment layerSegment = (LayerSegment)theEObject;
        T result = caseLayerSegment(layerSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LAYER_SEGMENT_RELATION:
      {
        LayerSegmentRelation layerSegmentRelation = (LayerSegmentRelation)theEObject;
        T result = caseLayerSegmentRelation(layerSegmentRelation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUBLAYER_SEGMENT:
      {
        SublayerSegment sublayerSegment = (SublayerSegment)theEObject;
        T result = caseSublayerSegment(sublayerSegment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATION_ARCH:
      {
        RelationArch relationArch = (RelationArch)theEObject;
        T result = caseRelationArch(relationArch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TECHNOLOGY:
      {
        Technology technology = (Technology)theEObject;
        T result = caseTechnology(technology);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JAVA_APP:
      {
        JavaApp javaApp = (JavaApp)theEObject;
        T result = caseJavaApp(javaApp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JEE_PROJECT:
      {
        JeeProject jeeProject = (JeeProject)theEObject;
        T result = caseJeeProject(jeeProject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SUBPROJECT:
      {
        Subproject subproject = (Subproject)theEObject;
        T result = caseSubproject(subproject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ABSTRACT_CLASS:
      {
        AbstractClass abstractClass = (AbstractClass)theEObject;
        T result = caseAbstractClass(abstractClass);
        if (result == null) result = caseEclass(abstractClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GENERIC_CLASS:
      {
        GenericClass genericClass = (GenericClass)theEObject;
        T result = caseGenericClass(genericClass);
        if (result == null) result = caseEclass(genericClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EINTERFACE:
      {
        Einterface einterface = (Einterface)theEObject;
        T result = caseEinterface(einterface);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.NATIVE_CLASS:
      {
        NativeClass nativeClass = (NativeClass)theEObject;
        T result = caseNativeClass(nativeClass);
        if (result == null) result = caseEclass(nativeClass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ECLASS:
      {
        Eclass eclass = (Eclass)theEObject;
        T result = caseEclass(eclass);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EPACKAGE:
      {
        Epackage epackage = (Epackage)theEObject;
        T result = caseEpackage(epackage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.METHOD_BACK:
      {
        MethodBack methodBack = (MethodBack)theEObject;
        T result = caseMethodBack(methodBack);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ABSTRACT_METHOD:
      {
        AbstractMethod abstractMethod = (AbstractMethod)theEObject;
        T result = caseAbstractMethod(abstractMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESCRIPTOR:
      {
        Descriptor descriptor = (Descriptor)theEObject;
        T result = caseDescriptor(descriptor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ANNOTATION:
      {
        Annotation annotation = (Annotation)theEObject;
        T result = caseAnnotation(annotation);
        if (result == null) result = caseEclass(annotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LIBRARY:
      {
        Library library = (Library)theEObject;
        T result = caseLibrary(library);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ABSTRACT_FRONT_ELEMENT:
      {
        AbstractFrontElement abstractFrontElement = (AbstractFrontElement)theEObject;
        T result = caseAbstractFrontElement(abstractFrontElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.REACT_APP:
      {
        ReactApp reactApp = (ReactApp)theEObject;
        T result = caseReactApp(reactApp);
        if (result == null) result = caseAbstractFrontElement(reactApp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FUNCTIONALITY:
      {
        Functionality functionality = (Functionality)theEObject;
        T result = caseFunctionality(functionality);
        if (result == null) result = caseAbstractFrontElement(functionality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ROUTER_COMPONENT:
      {
        RouterComponent routerComponent = (RouterComponent)theEObject;
        T result = caseRouterComponent(routerComponent);
        if (result == null) result = caseAbstractFrontElement(routerComponent);
        if (result == null) result = caseUIComponent(routerComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.UI_COMPONENT:
      {
        UIComponent uiComponent = (UIComponent)theEObject;
        T result = caseUIComponent(uiComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONTAINER:
      {
        Container container = (Container)theEObject;
        T result = caseContainer(container);
        if (result == null) result = caseAbstractFrontElement(container);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VISUALIZER:
      {
        Visualizer visualizer = (Visualizer)theEObject;
        T result = caseVisualizer(visualizer);
        if (result == null) result = caseAbstractFrontElement(visualizer);
        if (result == null) result = caseUIComponent(visualizer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SERVICE_FRONT:
      {
        ServiceFront serviceFront = (ServiceFront)theEObject;
        T result = caseServiceFront(serviceFront);
        if (result == null) result = caseAbstractFrontElement(serviceFront);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIRECTORY:
      {
        Directory directory = (Directory)theEObject;
        T result = caseDirectory(directory);
        if (result == null) result = caseAbstractFrontElement(directory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FILE:
      {
        File file = (File)theEObject;
        T result = caseFile(file);
        if (result == null) result = caseAbstractFrontElement(file);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MD:
      {
        Md md = (Md)theEObject;
        T result = caseMd(md);
        if (result == null) result = caseFile(md);
        if (result == null) result = caseAbstractFrontElement(md);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JS:
      {
        Js js = (Js)theEObject;
        T result = caseJs(js);
        if (result == null) result = caseFile(js);
        if (result == null) result = caseAbstractFrontElement(js);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JSON:
      {
        Json json = (Json)theEObject;
        T result = caseJson(json);
        if (result == null) result = caseFile(json);
        if (result == null) result = caseAbstractFrontElement(json);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CSS:
      {
        Css css = (Css)theEObject;
        T result = caseCss(css);
        if (result == null) result = caseFile(css);
        if (result == null) result = caseAbstractFrontElement(css);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATE:
      {
        State state = (State)theEObject;
        T result = caseState(state);
        if (result == null) result = caseAbstractFrontElement(state);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = caseAbstractFrontElement(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ACTION_CREATOR:
      {
        ActionCreator actionCreator = (ActionCreator)theEObject;
        T result = caseActionCreator(actionCreator);
        if (result == null) result = caseAbstractFrontElement(actionCreator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ACTION_DISPATCHER:
      {
        ActionDispatcher actionDispatcher = (ActionDispatcher)theEObject;
        T result = caseActionDispatcher(actionDispatcher);
        if (result == null) result = caseAbstractFrontElement(actionDispatcher);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.REDUCER:
      {
        Reducer reducer = (Reducer)theEObject;
        T result = caseReducer(reducer);
        if (result == null) result = caseAbstractFrontElement(reducer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JS_MODULE:
      {
        JsModule jsModule = (JsModule)theEObject;
        T result = caseJsModule(jsModule);
        if (result == null) result = caseAbstractFrontElement(jsModule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JS_METHOD:
      {
        JsMethod jsMethod = (JsMethod)theEObject;
        T result = caseJsMethod(jsMethod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JS_METHOD_ARGS:
      {
        JsMethodArgs jsMethodArgs = (JsMethodArgs)theEObject;
        T result = caseJsMethodArgs(jsMethodArgs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AXIOS_REQUEST:
      {
        AxiosRequest axiosRequest = (AxiosRequest)theEObject;
        T result = caseAxiosRequest(axiosRequest);
        if (result == null) result = caseAbstractFrontElement(axiosRequest);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>System</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>System</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSystem(org.xtext.example.mydsl.myDsl.System object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Domain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Domain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDomain(Domain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModule(org.xtext.example.mydsl.myDsl.Module object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Submodule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Submodule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubmodule(Submodule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperation(Operation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityName(EntityName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>General Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>General Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralEntity(GeneralEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProperty(Property object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Special Entity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Special Entity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecialEntity(SpecialEntity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Transaction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Transaction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTransaction(Transaction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operateson</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operateson</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperateson(Operateson object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation Dom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation Dom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationDom(RelationDom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Architecture</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Architecture</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArchitecture(Architecture object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponent(Component object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayer(Layer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayerSegment(LayerSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Layer Segment Relation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Layer Segment Relation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLayerSegmentRelation(LayerSegmentRelation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sublayer Segment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sublayer Segment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSublayerSegment(SublayerSegment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relation Arch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relation Arch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelationArch(RelationArch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Technology</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Technology</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTechnology(Technology object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Java App</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Java App</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJavaApp(JavaApp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Jee Project</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Jee Project</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJeeProject(JeeProject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Subproject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Subproject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubproject(Subproject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractClass(AbstractClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generic Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generic Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenericClass(GenericClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Einterface</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Einterface</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEinterface(Einterface object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Native Class</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Native Class</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNativeClass(NativeClass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Eclass</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Eclass</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEclass(Eclass object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Epackage</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Epackage</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEpackage(Epackage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Back</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Back</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodBack(MethodBack object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractMethod(AbstractMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Descriptor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Descriptor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDescriptor(Descriptor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotation(Annotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLibrary(Library object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Front Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Front Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractFrontElement(AbstractFrontElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>React App</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>React App</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReactApp(ReactApp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functionality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functionality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionality(Functionality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Router Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Router Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRouterComponent(RouterComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UI Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UI Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUIComponent(UIComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Container</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Container</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContainer(Container object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Visualizer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Visualizer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVisualizer(Visualizer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Service Front</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Service Front</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseServiceFront(ServiceFront object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectory(Directory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFile(File object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Md</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Md</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMd(Md object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Js</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Js</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJs(Js object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Json</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Json</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJson(Json object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Css</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Css</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCss(Css object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseState(State object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Creator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Creator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionCreator(ActionCreator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action Dispatcher</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action Dispatcher</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActionDispatcher(ActionDispatcher object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reducer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reducer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReducer(Reducer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Js Module</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Js Module</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJsModule(JsModule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Js Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Js Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJsMethod(JsMethod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Js Method Args</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Js Method Args</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJsMethodArgs(JsMethodArgs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Axios Request</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Axios Request</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAxiosRequest(AxiosRequest object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
