/**
 * generated by Xtext 2.18.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.generator.FrontGenerator;
import org.xtext.example.mydsl.myDsl.Descriptor;
import org.xtext.example.mydsl.myDsl.Epackage;
import org.xtext.example.mydsl.myDsl.GeneralEntity;
import org.xtext.example.mydsl.myDsl.LayerSegment;
import org.xtext.example.mydsl.myDsl.Property;
import org.xtext.example.mydsl.myDsl.Subproject;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    FrontGenerator frontGen = new FrontGenerator();
    frontGen.doGenerate(resource, fsa, context);
    Iterable<LayerSegment> _filter = Iterables.<LayerSegment>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), LayerSegment.class);
    for (final LayerSegment layerS : _filter) {
      {
        this.buildPackage("facade", layerS, resource, fsa);
        this.buildPackage("dto", layerS, resource, fsa);
        this.buildPackage("pojo", layerS, resource, fsa);
        this.buildPackage("restEntity", layerS, resource, fsa);
      }
    }
  }
  
  public void buildPackage(final String namePackage, final LayerSegment layerS, final Resource resource, final IFileSystemAccess2 fsa) {
    boolean _equals = layerS.getName().equals(StringExtensions.toFirstUpper(namePackage));
    if (_equals) {
      Iterable<GeneralEntity> _filter = Iterables.<GeneralEntity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), GeneralEntity.class);
      for (final GeneralEntity en : _filter) {
        Iterable<Subproject> _filter_1 = Iterables.<Subproject>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Subproject.class);
        for (final Subproject subp : _filter_1) {
          {
            Iterable<Epackage> _filter_2 = Iterables.<Epackage>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Epackage.class);
            for (final Epackage pck : _filter_2) {
              boolean _equals_1 = pck.getName().equals(namePackage);
              if (_equals_1) {
                this.selectCompile(en, layerS, namePackage, pck, fsa);
              }
            }
            EList<Descriptor> _descriptor = subp.getDescriptor();
            for (final Descriptor descriptor : _descriptor) {
              {
                boolean _equals_2 = descriptor.getName().equals("persistence_xml");
                if (_equals_2) {
                  String _string = this._iQualifiedNameProvider.getFullyQualifiedName(layerS.eContainer().eContainer()).toString();
                  String _plus = (_string + "/");
                  String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(subp).toString("/");
                  String _plus_1 = (_plus + _string_1);
                  String _plus_2 = (_plus_1 + "/");
                  String _path = descriptor.getPath();
                  String _plus_3 = (_plus_2 + _path);
                  String _plus_4 = (_plus_3 + "/");
                  String _replaceAll = descriptor.getName().replaceAll("_", ".");
                  String _plus_5 = (_plus_4 + _replaceAll);
                  fsa.generateFile(_plus_5, this.compilePersitenceXml(descriptor));
                }
                boolean _equals_3 = descriptor.getName().equals("web_xml");
                if (_equals_3) {
                  String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS.eContainer().eContainer()).toString();
                  String _plus_6 = (_string_2 + "/");
                  String _string_3 = this._iQualifiedNameProvider.getFullyQualifiedName(subp).toString("/");
                  String _plus_7 = (_plus_6 + _string_3);
                  String _plus_8 = (_plus_7 + "/");
                  String _path_1 = descriptor.getPath();
                  String _plus_9 = (_plus_8 + _path_1);
                  String _plus_10 = (_plus_9 + "/");
                  String _replaceAll_1 = descriptor.getName().replaceAll("_", ".");
                  String _plus_11 = (_plus_10 + _replaceAll_1);
                  fsa.generateFile(_plus_11, this.compileWebXml(descriptor));
                }
              }
            }
          }
        }
      }
    }
  }
  
  public void selectCompile(final GeneralEntity en, final LayerSegment layerS, final String namePackage, final Epackage pck, final IFileSystemAccess2 fsa) {
    boolean _equals = namePackage.equals("facade");
    if (_equals) {
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(layerS.eContainer().eContainer()).toString();
      String _plus = (_string + "/");
      String _string_1 = this._iQualifiedNameProvider.getFullyQualifiedName(pck).toString("/");
      String _plus_1 = (_plus + _string_1);
      String _plus_2 = (_plus_1 + 
        "/");
      String _name = en.getName().getName();
      String _plus_3 = (_plus_2 + _name);
      String _name_1 = layerS.getName();
      String _plus_4 = (_plus_3 + _name_1);
      String _plus_5 = (_plus_4 + ".java");
      fsa.generateFile(_plus_5, this.compileFacade(en));
    }
    boolean _equals_1 = namePackage.equals("dto");
    if (_equals_1) {
      String _string_2 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS.eContainer().eContainer()).toString();
      String _plus_6 = (_string_2 + "/");
      String _string_3 = this._iQualifiedNameProvider.getFullyQualifiedName(pck).toString("/");
      String _plus_7 = (_plus_6 + _string_3);
      String _plus_8 = (_plus_7 + 
        "/");
      String _name_2 = en.getName().getName();
      String _plus_9 = (_plus_8 + _name_2);
      String _name_3 = layerS.getName();
      String _plus_10 = (_plus_9 + _name_3);
      String _plus_11 = (_plus_10 + ".java");
      fsa.generateFile(_plus_11, this.compileDto(en));
    }
    boolean _equals_2 = namePackage.equals("restEntity");
    if (_equals_2) {
      String _string_4 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS.eContainer().eContainer()).toString();
      String _plus_12 = (_string_4 + "/");
      String _string_5 = this._iQualifiedNameProvider.getFullyQualifiedName(pck).toString("/");
      String _plus_13 = (_plus_12 + _string_5);
      String _plus_14 = (_plus_13 + 
        "/");
      String _name_4 = en.getName().getName();
      String _plus_15 = (_plus_14 + _name_4);
      String _name_5 = layerS.getName();
      String _plus_16 = (_plus_15 + _name_5);
      String _plus_17 = (_plus_16 + ".java");
      fsa.generateFile(_plus_17, this.compileRest(en));
    }
    boolean _equals_3 = namePackage.equals("pojo");
    if (_equals_3) {
      String _string_6 = this._iQualifiedNameProvider.getFullyQualifiedName(layerS.eContainer().eContainer()).toString();
      String _plus_18 = (_string_6 + "/");
      String _string_7 = this._iQualifiedNameProvider.getFullyQualifiedName(pck).toString("/");
      String _plus_19 = (_plus_18 + _string_7);
      String _plus_20 = (_plus_19 + 
        "/");
      String _name_6 = en.getName().getName();
      String _plus_21 = (_plus_20 + _name_6);
      String _plus_22 = (_plus_21 + ".java");
      fsa.generateFile(_plus_22, this.compilePojo(en));
    }
  }
  
  public String typeJava(final String type) {
    boolean _equals = type.equals("Num");
    if (_equals) {
      return "Integer";
    }
    return type;
  }
  
  public CharSequence compilePersitenceXml(final Descriptor d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<persistence version=\"2.0\" xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<persistence-unit name=\"casino-ejbPU\" transaction-type=\"JTA\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<provider>org.hibernate.ejb.HibernatePersistence</provider>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<jta-data-source>JNDI_casino</jta-data-source>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<exclude-unlisted-classes>false</exclude-unlisted-classes>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<properties>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<property name=\"hibernate.show_sql\" value=\"false\"/>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<property name=\"hibernate.format_sql\" value=\"false\"/>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</properties>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</persistence-unit>");
    _builder.newLine();
    _builder.append("</persistence>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileWebXml(final Descriptor d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<web-app version=\"3.1\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\">");
    _builder.newLine();
    _builder.append("</web>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Subproject s) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence compileDescriptor(final Descriptor d) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence compile(final Epackage pck) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = this._iQualifiedNameProvider.getFullyQualifiedName(pck).toString();
    _builder.append(_string);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compilePojo(final GeneralEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.jpa.entity.pojo;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName().getName();
    _builder.append(_name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Property> _properties = e.getProperties();
      for(final Property p : _properties) {
        _builder.append("\t\t");
        String _typeJava = this.typeJava(p.getType().getName());
        _builder.append(_typeJava, "\t\t");
        _builder.append(" ");
        String _name_1 = p.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//Get Set");
    _builder.newLine();
    {
      EList<Property> _properties_1 = e.getProperties();
      for(final Property p_1 : _properties_1) {
        _builder.append("\t\t");
        _builder.append("public void set");
        String _firstUpper = StringExtensions.toFirstUpper(p_1.getName());
        _builder.append(_firstUpper, "\t\t");
        _builder.append("(");
        String _typeJava_1 = this.typeJava(p_1.getType().getName());
        _builder.append(_typeJava_1, "\t\t");
        _builder.append(" ");
        String _name_2 = p_1.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_3 = p_1.getName();
        _builder.append(_name_3, "\t\t\t");
        _builder.append("=");
        String _name_4 = p_1.getName();
        _builder.append(_name_4, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t  ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t ");
        _builder.append("public ");
        String _typeJava_2 = this.typeJava(p_1.getType().getName());
        _builder.append(_typeJava_2, "\t\t\t ");
        _builder.append(" get");
        String _firstUpper_1 = StringExtensions.toFirstUpper(p_1.getName());
        _builder.append(_firstUpper_1, "\t\t\t ");
        _builder.append("(){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t \t");
        _builder.append("return this.");
        String _name_5 = p_1.getName();
        _builder.append(_name_5, "\t\t\t \t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileDto(final GeneralEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.jpa.entity.dto;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName().getName();
    _builder.append(_name);
    _builder.append("Dto {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileRest(final GeneralEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.rest.entity;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = e.getName().getName();
    _builder.append(_name);
    _builder.append("Res  extends AbstractRest<");
    String _name_1 = e.getName().getName();
    _builder.append(_name_1);
    _builder.append("> {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("@Context");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private UriInfo context;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t    ");
    String _name_2 = e.getName().getName();
    _builder.append(_name_2, "\t    ");
    _builder.append("Facade facade = BeanUtil.lookupFacadeBean(");
    String _name_3 = e.getName().getName();
    _builder.append(_name_3, "\t    ");
    _builder.append("Facade.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("public  ");
    String _name_4 = e.getName().getName();
    _builder.append(_name_4, "\t       ");
    _builder.append("Rest() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t            ");
    _builder.append("super( ");
    String _name_5 = e.getName().getName();
    _builder.append(_name_5, "\t            ");
    _builder.append(".class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("public  ");
    String _name_6 = e.getName().getName();
    _builder.append(_name_6, "\t        ");
    _builder.append("Facade getFacade() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t            ");
    _builder.append("return facade;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileFacade(final GeneralEntity e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package mdd.casino.jpa.entity.facade;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.ejb.Stateless;");
    _builder.newLine();
    _builder.append("import javax.persistence.EntityManager;");
    _builder.newLine();
    _builder.append("import javax.persistence.EntityManagerFactory;");
    _builder.newLine();
    _builder.append("import javax.persistence.PersistenceUnit;");
    _builder.newLine();
    _builder.append("import mdd.casino.jpa.entity.pojo.");
    String _name = e.getName().getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@Stateless");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = e.getName().getName();
    _builder.append(_name_1);
    _builder.append("Facade extends AbtractFacade{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("@PersistenceUnit");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("private EntityManagerFactory emf;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("protected EntityManager getEntityManager() {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return emf.createEntityManager();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("public ");
    String _name_2 = e.getName().getName();
    _builder.append(_name_2, "\t    ");
    _builder.append("Facade() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    _builder.append("super(");
    String _name_3 = e.getName().getName();
    _builder.append(_name_3, "\t        ");
    _builder.append(".class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}\t");
    _builder.newLine();
    return _builder;
  }
}
